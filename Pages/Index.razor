@page "/"
@using System.Collections.Generic
@using MathNet.Numerics.LinearAlgebra

<style>
    #initTable td, #initTable th { text-align: center; }
</style>

<div class="columns is-centered" style="padding-bottom: 1rem;">
    <div class="column is-narrow">
        <table class="table is-bordered" id="initTable">
            <tr>
                <th rowspan="2">Proizvod</th>
                <th rowspan="2">Prodana<br/>količina<br/>@GetMonthName(_previousPeriodNumber)</th>
                <th colspan="3">Smanjenje - prijelaz na</th>
                <th rowspan="2">Lojalni<br/>kupci</th>
                <th colspan="3">Povećanje - prijelaz od</th>
                <th rowspan="2">Prodana<br/>količina<br/>@GetMonthName(_previousPeriodNumber + 1)</th>
            </tr>
            <tr>
                <td>A</td>
                <td>B</td>
                <td>C</td>
                <td>A</td>
                <td>B</td>
                <td>C</td>
            </tr>
            <tr>
                <td>A</td>
                <td>@_productPreviousMatrix[0, 0]</td>
                <td>@_productTransitionMatrix[0, 0]</td>
                <td>@_productTransitionMatrix[0, 1]</td>
                <td>@_productTransitionMatrix[0, 2]</td>
                <td>@LoyalA</td>
                <td>@_productTransitionMatrix[0, 0]</td>
                <td>@_productTransitionMatrix[1, 0]</td>
                <td>@_productTransitionMatrix[2, 0]</td>
                <td>@NextA</td>
            </tr>
            <tr>
                <td>B</td>
                <td>@_productPreviousMatrix[1, 0]</td>
                <td>@_productTransitionMatrix[1, 0]</td>
                <td>@_productTransitionMatrix[1, 1]</td>
                <td>@_productTransitionMatrix[1, 2]</td>
                <td>@LoyalB</td>
                <td>@_productTransitionMatrix[0, 1]</td>
                <td>@_productTransitionMatrix[1, 1]</td>
                <td>@_productTransitionMatrix[2, 1]</td>
                <td>@NextB</td>
            </tr>
            <tr>
                <td>C</td>
                <td>@_productPreviousMatrix[2, 0]</td>
                <td>@_productTransitionMatrix[2, 0]</td>
                <td>@_productTransitionMatrix[2, 1]</td>
                <td>@_productTransitionMatrix[2, 2]</td>
                <td>@LoyalC</td>
                <td>@_productTransitionMatrix[0, 2]</td>
                <td>@_productTransitionMatrix[1, 2]</td>
                <td>@_productTransitionMatrix[2, 2]</td>
                <td>@NextC</td>
            </tr>
            <tr>
                <td colspan="9" style="text-align: right;">
                    <b>Ukupno</b>
                </td>
                <td>
                    <b>@SumNext</b>
                </td>
            </tr>
        </table>
    </div>
</div>

<div class="columns is-vcentered">
    <div class="column">
        <h3 class="title is-3">Postavljanje zadatka</h3>
    </div>
    <div class="column is-narrow">
        @if (_isDataOk)
        {
            <span class="tag is-primary">Podaci OK</span>
        }
        else
        {
            <span class="tag is-warning">Zadatak nije dobro postavljen</span>
        }
    </div>
    <div class="column is-narrow">
        <SimpleButton Clicked="@ResetData">Novi zadatak</SimpleButton>
    </div>
    <div class="column is-narrow">
        <SimpleButton Clicked="@AddTestData">Ubaci test podatke</SimpleButton>
    </div>
</div>

<div class="columns is-centered is-variable is-5">
    <div class="column is-narrow">
        <h5 class="title is-5">Prodaja u prethodnom razdoblju</h5>
        <div style="max-width: 7.5rem;">
            <Field>
                <FieldLabel>Razdoblje</FieldLabel>
                <FieldBody>
                    <SelectEdit SelectedValue="@_previousPeriodNumber" SelectedValueChanged="@PeriodSelected">
                        <SelectItem Value="0">siječanj</SelectItem>
                        <SelectItem Value="1">veljača</SelectItem>
                        <SelectItem Value="2">ožujak</SelectItem>
                        <SelectItem Value="3">travanj</SelectItem>
                        <SelectItem Value="4">svibanj</SelectItem>
                        <SelectItem Value="5">lipanj</SelectItem>
                        <SelectItem Value="6">srpanj</SelectItem>
                        <SelectItem Value="7">kolovoz</SelectItem>
                        <SelectItem Value="8">rujan</SelectItem>
                        <SelectItem Value="9">listopad</SelectItem>
                        <SelectItem Value="10">studeni</SelectItem>
                        <SelectItem Value="11">prosinac</SelectItem>
                    </SelectEdit>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Proizvod A</FieldLabel>
                <FieldBody>
                    <TextEdit bind-Text="@PreviousA"/>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Proizvod B</FieldLabel>
                <FieldBody>
                    <TextEdit bind-Text="@PreviousB"/>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Proizvod C</FieldLabel>
                <FieldBody>
                    <TextEdit bind-Text="@PreviousC"/>
                </FieldBody>
            </Field>
        </div>
    </div>
    <div class="column is-narrow">
        <h5 class="title is-5">Prodaja u sljedećem razdoblju</h5>
        <div style="max-width: 7.5rem;">
            <Field>
                <FieldLabel>Proizvod A</FieldLabel>
                <FieldBody>
                    <TextEdit bind-Text="@NextARef"/>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Proizvod B</FieldLabel>
                <FieldBody>
                    <TextEdit bind-Text="@NextBRef"/>
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Proizvod C</FieldLabel>
                <FieldBody>
                    <TextEdit bind-Text="@NextCRef"/>
                </FieldBody>
            </Field>
        </div>
    </div>
    <div class="column">
        <h5 class="title is-5">Promjene količine prodaje</h5>
        <div class="columns is-variable is-1 is-vcentered">
            <div class="column is-vcentered is-narrow">U prethodnom periodu proizvod</div>
            <div class="column is-vcentered is-narrow">
                <SelectEdit SelectedValue="@_selectedProduct" SelectedValueChanged="@ProductSelected">
                    <SelectItem Value="0">A</SelectItem>
                    <SelectItem Value="1">B</SelectItem>
                    <SelectItem Value="2">C</SelectItem>
                </SelectEdit>
            </div>
            <div class="column is-vcentered is-narrow">je</div>
            <div class="column is-vcentered is-narrow">
                <SelectEdit bind-SelectedValue="@_selectedMoreLess">
                    <SelectItem Value="0">povećao</SelectItem>
                    <SelectItem Value="1">smanjio</SelectItem>
                </SelectEdit>
            </div>


        </div>
        <div class="columns is-variable is-1 is-vcentered" style="margin-top: -1.5rem;">
            <div class="column is-vcentered is-narrow">količinu prodaje u odnosu na proizvod</div>
            <div class="column is-vcentered is-narrow">
                <SelectEdit SelectedValue="@_selectedProductToCompare" bind-SelectedValue="@_selectedProductToCompare">
                    <SelectItem Value="-1"></SelectItem>
                    @if (_selectedProduct != 0)
                    {
                        <SelectItem Value="0">A</SelectItem>
                    }
                    @if (_selectedProduct != 1)
                    {
                        <SelectItem Value="1">B</SelectItem>
                    }
                    @if (_selectedProduct != 2)
                    {
                        <SelectItem Value="2">C</SelectItem>
                    }
                </SelectEdit>
            </div>
            <div class="column is-vcentered is-narrow">za</div>
            <div class="column is-vcentered is-narrow" style="max-width: 4rem;">
                <NumericEdit TValue="int" bind-Value="@_productPieces"/>
            </div>
            <div class="column is-vcentered is-narrow">komad(a).</div>
        </div>
        <div class="columns is-variable is-1 is-vcentered" style="margin-top: -1rem;">
            <div class="column is-vcentered is-narrow">
                <SimpleButton Clicked="@UpdateMatrix" class="is-link is-outlined">
                    Ažuriraj
                </SimpleButton>
            </div>
            <div class="column is-vcentered is-narrow">
                <SimpleButton Clicked="@ShowManualEditModal" class="is-white is-small">
                    Tekstualni unos
                </SimpleButton>
            </div>
        </div>
    </div>
</div>

<Modal ref="_manualEditModal">
    <ModalBackdrop/>
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Tekstualni unos</ModalTitle>
            <CloseButton Clicked="@HideManualEditModal"/>
        </ModalHeader>
        <ModalBody>
            <p>Unesite elemente matrice promjene prodaje za <b>prethodno</b> razdoblje odvojene razmakom, po tri elementa u redu.</p>
            <br/>
            <p>Primjer:</p>
            <p class="mono-font">
                0 15 10<br/>
                7 0 9<br/>
                3 6 0
            </p>
            <br/>
            <MemoEdit bind-Text="@_manualEditText" class="mono-font" Rows="3" style="max-width: 6rem;"/>
        </ModalBody>
        <ModalFooter>
            <SimpleButton Clicked="@HideManualEditModal" class="is-light">Odustani</SimpleButton>
            <SimpleButton class="is-link" Clicked="@ManualEditUpdateValues">Ažuriraj</SimpleButton>
        </ModalFooter>
    </ModalContent>
</Modal>

@if (_isDataOk)
{
    <h3 class="title is-3">Rješenje zadatka</h3>
    <div class="columns is-variable is-5">

        <div class="column is-narrow">
            <h5 class="title is-5">Matrica prijelaznih vrijednosti</h5>
            <p class="mono-font">P</p>
            <table class="matrix">
                <tr>
                    <td>@($"{_productForecastingOriginalMatrix[0, 0]:F3}")</td>
                    <td>@($"{_productForecastingOriginalMatrix[0, 1]:F3}")</td>
                    <td>@($"{_productForecastingOriginalMatrix[0, 2]:F3}")</td>
                </tr>
                <tr>
                    <td>@($"{_productForecastingOriginalMatrix[1, 0]:F3}")</td>
                    <td>@($"{_productForecastingOriginalMatrix[1, 1]:F3}")</td>
                    <td>@($"{_productForecastingOriginalMatrix[1, 2]:F3}")</td>
                </tr>
                <tr>
                    <td>@($"{_productForecastingOriginalMatrix[2, 0]:F3}")</td>
                    <td>@($"{_productForecastingOriginalMatrix[2, 1]:F3}")</td>
                    <td>@($"{_productForecastingOriginalMatrix[2, 2]:F3}")</td>
                </tr>
            </table>
        </div>
        <div class="column is-narrow">
            <h5 class="title is-5">Stabilno stanje</h5>
            <p class="mono-font">A<sub>s</sub></p>
            <table class="matrix">
                <tr>
                    <td>@($"{_stableStateMatrix[0, 0]:F3}")</td>
                </tr>
                <tr>
                    <td>@($"{_stableStateMatrix[1, 0]:F3}")</td>
                </tr>
                <tr>
                    <td>@($"{_stableStateMatrix[2, 0]:F3}")</td>
                </tr>
            </table>
        </div>
        <div class="column">

            <h5 class="title is-5">Predviđanje ponašanja tržišta u budućim razdobljima</h5>

            <div class="columns">
               
     
                <div class="columns is-vcentered is-variable is-2">
                    <div class="column">
                        <SimpleButton IsDisabled="@(_nextForecastPeriodOffset < 1)" Clicked="@(() => { _nextForecastPeriodOffset -= _nextForecastPeriodOffset >= 1 ? 1 : 0; })">
                            <span class="icon">
                                <i class="fas fa-chevron-left"></i>
                            </span>
                        </SimpleButton>
                    </div>
                    <div class="column">
                        <div class="column is-vcentered">
                            <p class="mono-font">A<sub>@(_nextForecastPeriodOffset)</sub></p>
                            <table class="matrix">
                                <tr>
                                    <td>@($"{_futurePeriodMatrices[_nextForecastPeriodOffset][0, 0]:F3}")</td>
                                </tr>
                                <tr>
                                    <td>@($"{_futurePeriodMatrices[_nextForecastPeriodOffset][1, 0]:F3}")</td>
                                </tr>
                                <tr>
                                    <td>@($"{_futurePeriodMatrices[_nextForecastPeriodOffset][2, 0]:F3}")</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="column">
                        <SimpleButton IsDisabled="@(_nextForecastPeriodOffset > 47)" Clicked="@(() => { _nextForecastPeriodOffset += _nextForecastPeriodOffset <= 47 ? 1 : 0; })">
                            <span class="icon">
                                <i class="fas fa-chevron-right"></i>
                            </span>
                        </SimpleButton>
                    </div>
                </div>
            </div>


        </div>
       
    </div>
}

@functions
{

    #region Common

    Matrix<double> _productTransitionMatrix;
    Matrix<double> _productPreviousMatrix;
    Matrix<double> _productNextMatrix;
    Matrix<double> _productForecastingOriginalMatrix;
    Matrix<double> _productSalesStructureMatrix;
    Matrix<double> _newProductForecastingMatrix;
    Matrix<double> _stableStateMatrix;
    List<Matrix<double>> _futurePeriodMatrices = new List<Matrix<double>>();
    int _nextForecastPeriodOffset = 0;

    private Modal _manualEditModal;

    private void ShowManualEditModal()
    {
        _manualEditModal.Show();
    }

    private void HideManualEditModal()
    {
        _manualEditModal.Hide();
    }

    protected override void OnInit()
    {
        _productTransitionMatrix = Matrix<double>.Build.Dense(3, 3);
        _productForecastingOriginalMatrix = Matrix<double>.Build.Dense(3, 3);
        _productPreviousMatrix = Matrix<double>.Build.Dense(3, 1);
        _productNextMatrix = Matrix<double>.Build.Dense(3, 1);
        _productSalesStructureMatrix = Matrix<double>.Build.Dense(3, 1);
        _stableStateMatrix = Matrix<double>.Build.Dense(3, 1);
        _newProductForecastingMatrix = Matrix<double>.Build.Dense(3, 1);
    }

    static string GetMonthName(int month)
    {
        switch (month)
        {
            case 0:
                return "siječanj";
            case 1:
                return "veljača";
            case 2:
                return "ožujak";
            case 3:
                return "travanj";
            case 4:
                return "svibanj";
            case 5:
                return "lipanj";
            case 6:
                return "srpanj";
            case 7:
                return "kolovoz";
            case 8:
                return "rujan";
            case 9:
                return "listopad";
            case 10:
                return "studeni";
            case 11:
                return "prosinac";
            case 12:
                return "siječanj";
            default:
                return "";
        }
    }

    #endregion

    #region Page switching

    void AddTestData()
    {
        _futurePeriodMatrices.Clear();
        _nextForecastPeriodOffset = 0;

        _previousPeriodNumber = 1;

        _productPreviousMatrix[0, 0] = 130;
        _productPreviousMatrix[1, 0] = 100;
        _productPreviousMatrix[2, 0] = 70;

        _productNextMatrix[0, 0] = 115;
        _productNextMatrix[1, 0] = 105;
        _productNextMatrix[2, 0] = 80;

        _previousA = "130";
        _previousB = "100";
        _previousC = "70";

        _nextARef = "115";
        _nextBRef = "105";
        _nextCRef = "80";

        _productTransitionMatrix[0, 1] = 15;
        _productTransitionMatrix[0, 2] = 10;

        _productTransitionMatrix[1, 0] = 7;
        _productTransitionMatrix[1, 2] = 9;

        _productTransitionMatrix[2, 0] = 3;
        _productTransitionMatrix[2, 1] = 6;

        SolveTask();
        StateHasChanged();
    }

    void ResetData()
    {
        _futurePeriodMatrices.Clear();
        _nextForecastPeriodOffset = 0;

        _productPreviousMatrix[0, 0] = 0;
        _productPreviousMatrix[1, 0] = 0;
        _productPreviousMatrix[2, 0] = 0;

        _productNextMatrix[0, 0] = 0;
        _productNextMatrix[1, 0] = 0;
        _productNextMatrix[2, 0] = 0;

        _previousA = "0";
        _previousB = "0";
        _previousC = "0";

        _nextARef = "0";
        _nextBRef = "0";
        _nextCRef = "0";

        _productTransitionMatrix[0, 1] = 0;
        _productTransitionMatrix[0, 2] = 0;

        _productTransitionMatrix[1, 0] = 0;
        _productTransitionMatrix[1, 2] = 0;

        _productTransitionMatrix[2, 0] = 0;
        _productTransitionMatrix[2, 1] = 0;

        _selectedProduct = 0;
        _selectedMoreLess = 0;
        _selectedProductToCompare = -1;
        _productPieces = 0;
        _previousPeriodNumber = 0;

    //SolveTask();
        StateHasChanged();
    }

    #endregion

    #region Postavljanje zadatka

    bool _isDataOk => LoyalA > 0 && LoyalB > 0 && LoyalC > 0 && NextA > 0 && NextB > 0 && NextC > 0 && SumNext > 0 && LoyalA != _productPreviousMatrix[0, 0] && LoyalB != _productPreviousMatrix[1, 0] && LoyalC != _productPreviousMatrix[2, 0] && NextA == _productNextMatrix[0, 0] && NextB == _productNextMatrix[1, 0] && NextC == _productNextMatrix[2, 0];

    int _previousPeriodNumber = 0;

    int _selectedProduct;
    int _selectedMoreLess;
    int _selectedProductToCompare = -1;
    int _productPieces;

    void UpdateMatrix()
    {
        if (_selectedMoreLess == 1) // povećanje
        {
            _productTransitionMatrix[_selectedProduct, _selectedProductToCompare] = _productPieces;
        }
        else // smanjenje
        {
            _productTransitionMatrix[_selectedProductToCompare, _selectedProduct] = _productPieces;
        }
        StateHasChanged();
        SolveTask();
    }

    void ProductSelected(int value)
    {
        _selectedProduct = value;
        _selectedProductToCompare = -1;
        StateHasChanged();
    }

    void PeriodSelected(int value)
    {
        _previousPeriodNumber = value;
        StateHasChanged();
    }


    void SolveTask()
    {
        CalculateOriginalForecastingMatrix();
        CalculateOriginalSalesMatrix();
        CalculateStableState();
        StateHasChanged();
    }
    
    string _previousA = "";

    string PreviousA
    {
        get => _previousA;
        set
        {
            _previousA = value;
            _productPreviousMatrix[0, 0] = double.Parse(value == "" ? "0" : value);
        }
    }

    string _previousB = "";

    string PreviousB
    {
        get => _previousB;
        set
        {
            _previousB = value;
            _productPreviousMatrix[1, 0] = double.Parse(value == "" ? "0" : value);
        }
    }

    string _previousC = "";

    string PreviousC
    {
        get => _previousC;
        set
        {
            _previousC = value;
            _productPreviousMatrix[2, 0] = double.Parse(value == "" ? "0" : value);
        }
    }

    string _nextARef = "";

    string NextARef
    {
        get => _nextARef;
        set
        {
            _nextARef = value;
            _productNextMatrix[0, 0] = double.Parse(value == "" ? "0" : value);
        }
    }

    string _nextBRef = "";

    string NextBRef
    {
        get => _nextBRef;
        set
        {
            _nextBRef = value;
            _productNextMatrix[0, 0] = double.Parse(value == "" ? "0" : value);
        }
    }

    string _nextCRef = "";

    string NextCRef
    {
        get => _nextCRef;
        set
        {
            _nextCRef = value;
            _productNextMatrix[0, 0] = double.Parse(value == "" ? "0" : value);
        }
    }

    double LoyalA => _productPreviousMatrix[0, 0] - _productTransitionMatrix[0, 1] - _productTransitionMatrix[0, 2];
    double LoyalB => _productPreviousMatrix[1, 0] - _productTransitionMatrix[1, 0] - _productTransitionMatrix[1, 2];
    double LoyalC => _productPreviousMatrix[2, 0] - _productTransitionMatrix[2, 0] - _productTransitionMatrix[2, 1];

    double NextA => LoyalA + _productTransitionMatrix[1, 0] + _productTransitionMatrix[2, 0];
    double NextB => LoyalB + _productTransitionMatrix[0, 1] + _productTransitionMatrix[2, 1];
    double NextC => LoyalC + _productTransitionMatrix[0, 2] + _productTransitionMatrix[1, 2];

    double SumNext => NextA + NextB + NextC;

    string _manualEditText = "";

    void ManualEditUpdateValues()
    {
        var manualEntries = _manualEditText.Split('\n');
        var mE0 = manualEntries[0].Split(' ');
        var mE1 = manualEntries[1].Split(' ');
        var mE2 = manualEntries[2].Split(' ');

        _productTransitionMatrix[0, 1] = double.Parse(mE0[1]);
        _productTransitionMatrix[0, 2] = double.Parse(mE0[2]);
        _productTransitionMatrix[1, 0] = double.Parse(mE1[0]);
        _productTransitionMatrix[1, 2] = double.Parse(mE1[2]);
        _productTransitionMatrix[2, 0] = double.Parse(mE2[0]);
        _productTransitionMatrix[2, 1] = double.Parse(mE2[1]);

        StateHasChanged();
        SolveTask();
        _manualEditModal.Hide();
    }

    #endregion

    #region Matrica prijelaznih vrijednosti

    void CalculateOriginalForecastingMatrix()
    {
        _productForecastingOriginalMatrix[0, 0] = LoyalA / _productPreviousMatrix[0, 0];
        _productForecastingOriginalMatrix[1, 0] = _productTransitionMatrix[0, 1] / _productPreviousMatrix[0, 0];
        _productForecastingOriginalMatrix[2, 0] = _productTransitionMatrix[0, 2] / _productPreviousMatrix[0, 0];

        _productForecastingOriginalMatrix[0, 1] = _productTransitionMatrix[1, 0] / _productPreviousMatrix[1, 0];
        _productForecastingOriginalMatrix[1, 1] = LoyalB / _productPreviousMatrix[1, 0];
        _productForecastingOriginalMatrix[2, 1] = _productTransitionMatrix[1, 2] / _productPreviousMatrix[1, 0];

        _productForecastingOriginalMatrix[0, 2] = _productTransitionMatrix[2, 0] / _productPreviousMatrix[2, 0];
        _productForecastingOriginalMatrix[1, 2] = _productTransitionMatrix[2, 1] / _productPreviousMatrix[2, 0];
        _productForecastingOriginalMatrix[2, 2] = LoyalC / _productPreviousMatrix[2, 0];
    }

    void CalculateOriginalSalesMatrix()
    {
        _productSalesStructureMatrix[0, 0] = NextA / SumNext;
        _productSalesStructureMatrix[1, 0] = NextB / SumNext;
        _productSalesStructureMatrix[2, 0] = NextC / SumNext;

        _futurePeriodMatrices.Add(_productSalesStructureMatrix);

        for (var i = 0; i < 48; i++)
        {
            _futurePeriodMatrices.Add(_productForecastingOriginalMatrix * _futurePeriodMatrices[i]);
        }
    }

    void CalculateStableState()
    {
        var A = Matrix<double>.Build.DenseOfArray(new[,]
        {
            {_productForecastingOriginalMatrix[0, 0] - 1, _productForecastingOriginalMatrix[0, 1], _productForecastingOriginalMatrix[0, 2]},
            {_productForecastingOriginalMatrix[1, 0], _productForecastingOriginalMatrix[1, 1] - 1, _productForecastingOriginalMatrix[1, 2]},
            {_productForecastingOriginalMatrix[2, 0], _productForecastingOriginalMatrix[2, 1], _productForecastingOriginalMatrix[2, 2] - 1},
            {1, 1, 1}
        });
        var b = Vector<double>.Build.Dense(new double[] {1, 1, 1, 1});
        _stableStateMatrix = A.Solve(b).ToColumnMatrix();
    }

    #endregion

    #region Predviđanja u budućim razdobljima

    #endregion

    #region Stabilno stanje

    #endregion

}